# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Sun Mar  7 01:19:37 2010

import wx

# vamos a manejar archivos y directorios
import os

from AboutFrame import AboutFrame
from InstructionListCtrl import InstructionListCtrl 

from helpers import *
from registros import lib
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade



class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.sizer_12_staticbox = wx.StaticBox(self, -1, "Pila")
        self.sizer_7_staticbox = wx.StaticBox(self, -1, "Registro de Control")
        self.sizer_8_staticbox = wx.StaticBox(self, -1, "Registro de Estado")
        self.sizer_3_staticbox = wx.StaticBox(self, -1, "Instrucciones")
        
        # Menu Bar
        self.frame_1_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.NewId(), "&Nuevo", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(wx.NewId(), "&Abrir", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(wx.NewId(), "&Guardar", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(wx.NewId(), "Guardar como...", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(wx.NewId(), "&Salir", "", wx.ITEM_NORMAL)
        self.frame_1_menubar.Append(wxglade_tmp_menu, "&Archivo")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.NewId(), u"Índ&ice", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(wx.NewId(), "&Acerca de..", "", wx.ITEM_NORMAL)
        self.frame_1_menubar.Append(wxglade_tmp_menu, "A&yuda")
        self.SetMenuBar(self.frame_1_menubar)
        # Menu Bar end
        self.statusbar = self.CreateStatusBar(2, 0)
        
        # Tool Bar
        tools_ids = [wx.NewId() for i in range(11)]
        
        self.frame_1_toolbar = wx.ToolBar(self, -1, style=wx.TB_HORIZONTAL|wx.TB_DOCKABLE)
        self.SetToolBar(self.frame_1_toolbar)
        self.frame_1_toolbar.AddLabelTool(tools_ids[0], "Nuevo", wx.Bitmap("icons/document-new.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Secuencia nuevo", "")
        self.frame_1_toolbar.AddLabelTool(tools_ids[1], "Abrir", wx.Bitmap("icons/document-open.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Abrir archivo", "")
        self.frame_1_toolbar.AddLabelTool(tools_ids[2], "Guardar", wx.Bitmap("icons/document-save.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Guardar archivo", "")
        self.frame_1_toolbar.AddLabelTool(tools_ids[3], "Guardar como...", wx.Bitmap("icons/document-save-as.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Guardar con otro nombre", "")
        self.frame_1_toolbar.AddSeparator()
        self.frame_1_toolbar.AddLabelTool(tools_ids[4], "Arriba", wx.Bitmap("icons/go-top.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Subir al tope", "")
        self.frame_1_toolbar.AddLabelTool(tools_ids[5], "Subir", wx.Bitmap("icons/go-up.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Subir una intrucción", "")
        self.frame_1_toolbar.AddLabelTool(tools_ids[6], "Bajar", wx.Bitmap("icons/go-down.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Bajar una instrucción", "")
        self.frame_1_toolbar.AddLabelTool(tools_ids[7], "Abajo", wx.Bitmap("icons/go-bottom.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Bajar al final", "")
        self.frame_1_toolbar.AddLabelTool(tools_ids[8], "Borrar", wx.Bitmap("icons/list-remove.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Borrar instrucción", "")
        self.frame_1_toolbar.AddSeparator()
        self.frame_1_toolbar.AddLabelTool(tools_ids[9], "Ejecutar", wx.Bitmap("icons/go-next.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        self.frame_1_toolbar.AddLabelTool(tools_ids[9], "Actualizar", wx.Bitmap("icons/view-refresh.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
       
       
        # Tool Bar end
        self.instructionInput = wx.TextCtrl(self, -1, "", style=wx.TE_PROCESS_ENTER|wx.TE_PROCESS_TAB)
        self.bitmap_button_1 = wx.BitmapButton(self, -1, wx.Bitmap("icons/list-add.png", wx.BITMAP_TYPE_ANY))
        self.instructionsList = InstructionListCtrl(self, -1, style=wx.LC_REPORT|wx.LC_EDIT_LABELS|wx.LC_HRULES|wx.SUNKEN_BORDER, statusbar=self.statusbar )
        self.stackList = wx.ListCtrl(self, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        self.controlList = wx.ListCtrl(self, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        self.statusList = wx.ListCtrl(self, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.actionNew, id=-1)
        self.Bind(wx.EVT_MENU, self.actionOpen, id=-1)
        self.Bind(wx.EVT_MENU, self.actionSave, id=-1)
        self.Bind(wx.EVT_MENU, self.actionSaveAs, id=-1)
        self.Bind(wx.EVT_MENU, self.actionExit, id=-1)
        self.Bind(wx.EVT_MENU, self.actionShowHelp, id=-1)
        self.Bind(wx.EVT_MENU, self.actionShowAbout, id=-1)
       
       
        self.Bind(wx.EVT_TOOL, self.actionNew, id=tools_ids[0])
        self.Bind(wx.EVT_TOOL, self.actionOpen, id=tools_ids[1])
        self.Bind(wx.EVT_TOOL, self.actionSave, id=tools_ids[2])
        self.Bind(wx.EVT_TOOL, self.actionSaveAs, id=tools_ids[3])
        self.Bind(wx.EVT_TOOL, self.actionGoTop, id=tools_ids[4])
        self.Bind(wx.EVT_TOOL, self.actionUp, id=tools_ids[5])
        self.Bind(wx.EVT_TOOL, self.actionDown, id=tools_ids[6])
        self.Bind(wx.EVT_TOOL, self.actionBottom, id=tools_ids[7])
        self.Bind(wx.EVT_TOOL, self.actionDelete, id=tools_ids[8])
        self.Bind(wx.EVT_TOOL, self.actionRunNext, id=tools_ids[9])
        self.Bind(wx.EVT_TOOL, self.actionRefreshAll, id=tools_ids[9])
       
       
        self.Bind(wx.EVT_TEXT_ENTER, self.actionAdd, self.instructionInput)
        self.Bind(wx.EVT_BUTTON, self.actionAdd, self.bitmap_button_1)
        # end wxGlade
        
        self.doiexit = wx.MessageDialog( self, "Desea salir? \n",
                        "GOING away ...", wx.YES_NO)
       
        

    def __set_properties(self):
        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle("FPU Inspector")
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(wx.Bitmap("icons/icon.jpg", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.statusbar.SetStatusWidths([300, -1])
        # statusbar fields
        statusbar_fields = [u"Agregue una instrucción para comenzar", ""]
        for i in range(len(statusbar_fields)):
            self.statusbar.SetStatusText(statusbar_fields[i], i)
        self.frame_1_toolbar.Realize()
        self.instructionInput.SetMinSize((200, 27))
        self.instructionInput.SetToolTipString(u"Ingrese una instrucción de FPU aquí")
        self.instructionInput.SetFocus()
        self.bitmap_button_1.SetSize(self.bitmap_button_1.GetBestSize())    
        # end wxGlade
        
        
        self.instructionsList.InsertColumn(0,u'Código')
        
        registro_estado = [('IE',u'Bit de error de operación inválida',
                        u'Indica una operación inválida: desbordamiento \
                        de la pila, un valor indeterminado, raíz \
                        cuadrada de número negativo,..'),
                        ('DE',u'Bit de error de operando no normalizado',
                        u'Indica que al menos uno de los operandos \
                        no está normalizado.'),
                        ('ZE',u'Bit de error de división por cero',
                        u'Indica una división por cero.'),
                        ('OE',u'Bit de error de overflow',u'Indica \
                        un error de desbordamiento (resultado \
                        demasiado grande para ser representado).'),
                        ('UE', u'Bit de erro de underflow', u'Indica \
                        un error de subflujo (resultado diferente a 0 \
                        que es demasiado pequeño para ser representado \
                        con la precisión actual seleccionada por \
                        la palabra de control).'),
                        ('PE', u'Bit de error de precisión', u'Indica \
                        que el resultado o los operandos exceden \
                        la precisión seleccionada.'),
                        ('SF', u'Bit de operación inválida', u'Diferencia \
                        entre las operaciones inválidas al interpretar \
                        los bits del código de condición.'),
                        ('ES', u'Bit de resumen de errores', u'Si está a 1, \
                        indica que cualquiera de los bits de error \
                        no enmascarado está a 1.'),
                        ('TOP0', u'Campo de tope o cima de pila', 
                        u'Muestra el primer registro activo de la pila \
                        (registro actualmente diseccionado como registro \
                        superior de la pila (ST)).'),
                        ('TOP1', u'Campo de tope o cima de pila', 
                        u'Muestra el primer registro activo de la pila \
                        (registro actualmente diseccionado como registro \
                        superior de la pila (ST)).'),
                        ('C0', u'Bits del código de condición', 
                        u'indican condiciones del coprocesador, resultado \
                        de operaciones aritméticas y de comparación \
                        en coma flotante. Utilizados para el tratamiento \
                        de excepciones.'),
                        ('C1', u'Bits del código de condición', 
                        u'indican condiciones del coprocesador, resultado \
                        de operaciones aritméticas y de comparación \
                        en coma flotante. Utilizados para el tratamiento \
                        de excepciones.'),
                        ('C2', u'Bits del código de condición', 
                        u'indican condiciones del coprocesador, resultado \
                        de operaciones aritméticas y de comparación \
                        en coma flotante. Utilizados para el tratamiento \
                        de excepciones.'),
                        ('C3', u'Bits del código de condición', 
                        u'indican condiciones del coprocesador, resultado \
                        de operaciones aritméticas y de comparación \
                        en coma flotante. Utilizados para el tratamiento \
                        de excepciones.'),
                        ('B',u'Bit de ocupado', u'Indica que el coprocesador \
                        está ocupado realizando una tarea. Los coprocesadores \
                        actuales no necesitan verificar este bit, ya que se \
                        sincronizan automáticamente con el microprocesador.'),
                        ('X',u'Bit reservado', u'')]
        
        for n,col in enumerate(registro_estado):
            self.statusList.InsertColumn(n,col[0], format=wx.LIST_FORMAT_CENTER)
            self.statusList.SetColumnWidth(n,30)
        
        registro_estado.reverse()
            
        registro_control = [('IM',u'Máscara de operación inválida',''),
                        ('DM',u'Máscara de operando no normalizado',''),
                        ('ZM',u'Máscara de división por cero',''),
                        ('OM',u'Máscara de overflow',''),
                        ('UM', u'Máscara de underflow', ''),
                        ('PE', u'Máscara de error de precisión', ''),
                        ('', '', ''),
                        ('', '', ''),
                        ('PC0', u'Control de precisión', u'00: precisión sencilla\n\
                        01:Reservado\n10:Doble precisión (largo)\n\
                        11: Precisión extendida (temporal)'),
                        ('PC1', u'Control de precisión', u'00: precisión sencilla\n\
                        01:Reservado\n10:Doble precisión (largo)\n\
                        11: Precisión extendida (temporal)'),
                        ('RC0', u'Control de redondeo', u'00:redondeo al más cercano o par\n\
                        01:Redondeo hacia abajo\n10:Redondeo hacia arriba\n\
                        11: Trunca'),
                        ('RC1', u'Control de redondeo', u'00:redondeo al más cercano o par\n\
                        01:Redondeo hacia abajo\n10:Redondeo hacia arriba\n\
                        11: Trunca'),
                        ('IC', u'Control de infinito', 
                        u'0: Proyectivo\n1: Afin'),
                        ('', '', ''),
                        ('', '', ''),
                        ('', '', ''),
                        ]
        
        registro_control.reverse()
        
        for n,col in enumerate(registro_control):
            self.controlList.InsertColumn(n,col[0],format=wx.LIST_FORMAT_CENTER)
            self.controlList.SetColumnWidth(n,30)

        stack_cols = ('ST', 'Float', 'Binario')
        
        for n,col in enumerate(stack_cols):
            self.stackList.InsertColumn(n,col[0])
        self.stackList.SetColumnWidth(0,30)
        self.stackList.SetColumnWidth(1,100)
        self.stackList.SetColumnWidth(2,100)
        
                            
    def __do_layout(self):
        # begin wxGlade: MainFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_8 = wx.StaticBoxSizer(self.sizer_8_staticbox, wx.HORIZONTAL)
        sizer_7 = wx.StaticBoxSizer(self.sizer_7_staticbox, wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12 = wx.StaticBoxSizer(self.sizer_12_staticbox, wx.HORIZONTAL)
        sizer_3 = wx.StaticBoxSizer(self.sizer_3_staticbox, wx.VERTICAL)
        sizer_4 = wx.FlexGridSizer(1, 3, 0, 0)
        sizer_4.Add(self.instructionInput, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_4.Add(self.bitmap_button_1, 0, 0, 0)
        sizer_3.Add(sizer_4, 0, wx.EXPAND, 0)
        sizer_3.Add(self.instructionsList, 1, wx.EXPAND, 0)
        sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)
        sizer_12.Add(self.stackList, 1, wx.EXPAND, 0)
        sizer_2.Add(sizer_12, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        sizer_7.Add(self.controlList, 1, wx.EXPAND|wx.FIXED_MINSIZE, 0)
        sizer_6.Add(sizer_7, 1, wx.EXPAND, 0)
        sizer_8.Add(self.statusList, 1, wx.EXPAND|wx.FIXED_MINSIZE, 0)
        sizer_6.Add(sizer_8, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_6, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        self.Centre()
        # end wxGlade



    def actionNew(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `actionNew' not implemented!"
        

    def actionOpen(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `actionOpen' not implemented!"
        

    def actionSave(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `actionSave' not implemented!"
        

    def actionSaveAs(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `actionSaveAs' not implemented!"
        

    def actionExit(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `actionExit' not implemented!"
        

    def actionShowHelp(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `actionShowHelp' not implemented!"
        

    def actionShowAbout(self, event): # wxGlade: MainFrame.<event_handler>
        self.about = AboutFrame(None, -1, "")
        self.about.Show(True)
        
        

    def actionGoTop(self, event): # wxGlade: MainFrame.<event_handler>
        self.instructionsList.move_top()

    def actionUp(self, event): # wxGlade: MainFrame.<event_handler>
        self.instructionsList.move_up()
        

    def actionDown(self, event): # wxGlade: MainFrame.<event_handler>
        self.instructionsList.move_down()
        

    def actionBottom(self, event): # wxGlade: MainFrame.<event_handler>
        self.instructionsList.move_bottom()
        

    def actionDelete(self, event): # wxGlade: MainFrame.<event_handler>
        self.instructionsList.delete()
        

    def actionRunNext(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `actionRunNext' not implemented!"

    def actionRefreshAll(self, event): # wxGlade: MainFrame.<event_handler>
        self.actionRefreshControl(event)
        self.actionRefreshStatus(event)
        
    
    def actionRefreshControl(self, event):
        control_val = lib.getControl()
        print "control: " + str(control_val)
        self.controlList.DeleteAllItems()
        self.controlList.Append(int2bin(control_val))
        
    def actionRefreshStatus(self, event):
        status_val = lib.getEstado()
        print "estado: " + str(status_val)
        self.statusList.DeleteAllItems()
        self.statusList.Append(int2bin(status_val))
    
    def actionRefreshStack(self, event):
        stack_val = lib.getSt0()
        print "st0: " + str(stack_val)
        self.stackList.DeleteAllItems()
        
        
        
    

    def addInstruction(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `addInstruction' not implemented!"
        

    def actionAdd(self, event): # wxGlade: MainFrame.<event_handler>
        instruccion = self.instructionInput.GetValue().upper()
        
        if is_valid(instruccion):
            self.instructionsList.Append([instruccion])
            self.instructionInput.SetValue('')
            self.instructionInput.SetFocus()
            statusbar_fields = [u"Instrucción agregada", ""]
        else:
            statusbar_fields = [u"Instrucción incorrecta", ""]
    
        for i in range(len(statusbar_fields)):
            self.statusbar.SetStatusText(statusbar_fields[i], i)
    

# end of class MainFrame


